// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	organizationv1 "app/gen/organization/v1"

	toolsv1 "app/gen/tools/v1"
)

// ServiceOrganization is an autogenerated mock type for the ServiceOrganization type
type ServiceOrganization struct {
	mock.Mock
}

// CreateOrganization provides a mock function with given fields: ctx, req
func (_m *ServiceOrganization) CreateOrganization(ctx context.Context, req *organizationv1.RequestOrganization) (*organizationv1.ResponseOrganization, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrganization")
	}

	var r0 *organizationv1.ResponseOrganization
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *organizationv1.RequestOrganization) (*organizationv1.ResponseOrganization, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *organizationv1.RequestOrganization) *organizationv1.ResponseOrganization); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*organizationv1.ResponseOrganization)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *organizationv1.RequestOrganization) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteOrganization provides a mock function with given fields: ctx, req
func (_m *ServiceOrganization) DeleteOrganization(ctx context.Context, req *organizationv1.ParamsOrganization) (*toolsv1.Empty, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOrganization")
	}

	var r0 *toolsv1.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *organizationv1.ParamsOrganization) (*toolsv1.Empty, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *organizationv1.ParamsOrganization) *toolsv1.Empty); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*toolsv1.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *organizationv1.ParamsOrganization) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DetailOrganization provides a mock function with given fields: ctx, params
func (_m *ServiceOrganization) DetailOrganization(ctx context.Context, params *organizationv1.ParamsOrganization) (*organizationv1.ResponseOrganization, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for DetailOrganization")
	}

	var r0 *organizationv1.ResponseOrganization
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *organizationv1.ParamsOrganization) (*organizationv1.ResponseOrganization, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *organizationv1.ParamsOrganization) *organizationv1.ResponseOrganization); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*organizationv1.ResponseOrganization)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *organizationv1.ParamsOrganization) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListOrganization provides a mock function with given fields: ctx, req
func (_m *ServiceOrganization) ListOrganization(ctx context.Context, req *organizationv1.ParamsOrganization) (*organizationv1.ResponseOrganizationList, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ListOrganization")
	}

	var r0 *organizationv1.ResponseOrganizationList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *organizationv1.ParamsOrganization) (*organizationv1.ResponseOrganizationList, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *organizationv1.ParamsOrganization) *organizationv1.ResponseOrganizationList); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*organizationv1.ResponseOrganizationList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *organizationv1.ParamsOrganization) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOrganization provides a mock function with given fields: ctx, req
func (_m *ServiceOrganization) UpdateOrganization(ctx context.Context, req *organizationv1.RequestOrganization) (*organizationv1.ResponseOrganization, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrganization")
	}

	var r0 *organizationv1.ResponseOrganization
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *organizationv1.RequestOrganization) (*organizationv1.ResponseOrganization, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *organizationv1.RequestOrganization) *organizationv1.ResponseOrganization); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*organizationv1.ResponseOrganization)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *organizationv1.RequestOrganization) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewServiceOrganization creates a new instance of ServiceOrganization. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewServiceOrganization(t interface {
	mock.TestingT
	Cleanup(func())
}) *ServiceOrganization {
	mock := &ServiceOrganization{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
